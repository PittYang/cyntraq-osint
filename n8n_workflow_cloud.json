{
  "name": "OSINT_Cloud_Translate_Alert_to_Supabase",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": [
          {
            "mode": "everyX",
            "unit": "hours",
            "value": 3
          }
        ]
      },
      "id": "Cron",
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        200,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/<YOUR_GITHUB_USERNAME>/<YOUR_REPO>/main/rss_sources.csv",
        "responseFormat": "file",
        "download": true
      },
      "id": "FetchCSV",
      "name": "Fetch rss_sources.csv",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        400,
        200
      ]
    },
    {
      "parameters": {
        "options": {
          "delimiter": ",",
          "includeEmptyStrings": false,
          "headerRow": true
        }
      },
      "id": "CSVtoJSON",
      "name": "CSV → JSON",
      "type": "n8n-nodes-base.csv",
      "typeVersion": 1,
      "position": [
        600,
        200
      ]
    },
    {
      "parameters": {},
      "id": "SplitBatches",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        800,
        200
      ]
    },
    {
      "parameters": {
        "url": "={{$json[\"url\"]}}"
      },
      "id": "RSSRead",
      "name": "RSS Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        1000,
        200
      ]
    },
    {
      "parameters": {
        "mode": "json",
        "jsonProperties": [
          "title",
          "link",
          "pubDate",
          "contentSnippet",
          "isoDate"
        ]
      },
      "id": "RSStoJSON",
      "name": "RSS → JSON",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 1,
      "position": [
        1200,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Deduplicate by link\nconst seen = new Set();\nreturn items.filter(i => {\n  const u = i.json.link;\n  if (!u) return false;\n  if (seen.has(u)) return false;\n  seen.add(u); return true;\n});"
      },
      "id": "Dedup",
      "name": "Deduplicate",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1400,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Simple keyword tagging & risk scoring\nconst riskKeywords = [\n  {kw: '台獨', cat:'TW_Narrative', risk:4},\n  {kw: '顏色革命', cat:'AntiWest', risk:5},\n  {kw: '統一', cat:'Unification', risk:3},\n  {kw: '境外勢力', cat:'ForeignInfluence', risk:4},\n  {kw: '假訊息', cat:'Disinfo', risk:3},\n  {kw: '認知作戰', cat:'Cognitive', risk:4},\n  {kw: '台海', cat:'CrossStrait', risk:2},\n  {kw: '和平協議', cat:'PolicyNarrative', risk:2}\n];\nreturn items.map(i => {\n  const title = (i.json.title || '').toLowerCase();\n  const content = (i.json.contentSnippet || '').toLowerCase();\n  let tags = new Set();\n  let risk = 1;\n  for (const r of riskKeywords) {\n    if (title.includes(r.kw) || content.includes(r.kw) || title.includes(r.kw.toLowerCase()) || content.includes(r.kw.toLowerCase())) {\n      tags.add(r.cat);\n      risk = Math.max(r.risk, risk);\n    }\n  }\n  i.json._category = Array.from(tags).join(',');\n  i.json._risk = risk;\n  return i;\n});"
      },
      "id": "Tagging",
      "name": "Keyword Tagging",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1600,
        200
      ]
    },
    {
      "parameters": {
        "url": "={{$env.LIBRETRANSLATE_URL || 'http://osint-libretranslate:5000'}}/translate",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "{ \"q\": $json[\"contentSnippet\"] || $json[\"title\"], \"source\": \"auto\", \"target\": \"en\", \"format\": \"text\" }",
        "requestMethod": "POST"
      },
      "id": "TranslateEN",
      "name": "Translate → EN (LibreTranslate)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1800,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "items.forEach(i => { i.json.translated_en = i.json.data && i.json.data.translatedText ? i.json.data.translatedText : ''; });\nreturn items;"
      },
      "id": "ExtractTranslation",
      "name": "Extract translated_en",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2000,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.items (title, url, source, language, published_at, content, translated_en, category, risk_level) VALUES ({{$json['title'] || 'N/A'}}, {{$json['link']}}, {{$json['source'] || 'rss'}}, {{$json['lang'] || 'UNK'}}, {{$json['isoDate'] ? new Date($json['isoDate']).toISOString() : 'NOW()'}}, {{$json['contentSnippet'] || ''}}, {{$json['translated_en'] || ''}}, {{$json['_category'] || ''}}, {{$json['_risk'] || 1}}) ON CONFLICT (url) DO NOTHING;"
      },
      "id": "SupabaseInsert",
      "name": "Insert to Supabase",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        2200,
        200
      ],
      "credentials": {
        "postgres": {
          "id": "SUPABASE_CREDS_PLACEHOLDER",
          "name": "Supabase"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json['_risk']}}",
              "operation": "larger",
              "value2": 3
            }
          ]
        }
      },
      "id": "RiskHigh",
      "name": "Risk >= 4 ?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        420
      ]
    },
    {
      "parameters": {
        "botToken": "={{$env.TELEGRAM_BOT_TOKEN}}",
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "={{'🔴 高風險敘事：' + ($json['title'] || '') + '\\n來源：' + ($json['source'] || 'rss') + '\\n連結：' + ($json['link'] || '')}}"
      },
      "id": "TelegramAlert",
      "name": "Telegram Alert",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2200,
        420
      ],
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_CREDS_PLACEHOLDER",
          "name": "Telegram"
        }
      }
    },
    {
      "parameters": {},
      "id": "LoopNext",
      "name": "Next Batch",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        1200,
        460
      ]
    }
  ],
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "Fetch rss_sources.csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch rss_sources.csv": {
      "main": [
        [
          {
            "node": "CSV → JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV → JSON": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "RSS → JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS → JSON": {
      "main": [
        [
          {
            "node": "Deduplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate": {
      "main": [
        [
          {
            "node": "Keyword Tagging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keyword Tagging": {
      "main": [
        [
          {
            "node": "Translate → EN (LibreTranslate)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Risk >= 4 ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate → EN (LibreTranslate)": {
      "main": [
        [
          {
            "node": "Extract translated_en",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract translated_en": {
      "main": [
        [
          {
            "node": "Insert to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Risk >= 4 ?": {
      "main": [
        [
          {
            "node": "Telegram Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Alert": {
      "main": [
        [
          {
            "node": "Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert to Supabase": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}